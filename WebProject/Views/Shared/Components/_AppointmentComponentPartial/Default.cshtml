@model WebProject.Models.Appointment
@using WebProject.Localization
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResources> localizer

<!-- CSS -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<section id="contact" class="contact section">
    <div class="container section-title mb-3">
        <h2>@localizer["GetAppointment"]</h2>
        <h5 class="mb-0">@localizer["AppointmentSubtitle"]</h5>
    </div>

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .loading, .error-message, .sent-message {
            display: none !important;
        }

        #calendar {
            max-width: 800px;
            background-color: #fff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .fc-daygrid-day-number, .fc-col-header-cell a {
            color: #000;
            font-weight: bold;
            text-decoration: none !important;
        }

        .fc-daygrid-day, .fc-col-header-cell {
            border: 1px solid #ddd !important;
        }

        .fc-daygrid-day {
            height: 100px;
            position: relative;
        }

        .fc-scrollgrid-sync-table {
            border-collapse: collapse !important;
        }

        #timeSlotsContainer button {
            margin-bottom: 8px;
            width: 80%;
            min-width: 110px;
            padding: 10px;
        }

            #timeSlotsContainer button.active {
                background-color: royalblue;
                color: #fff;
            }

            #timeSlotsContainer button:disabled {
                background-color: #e0e0e0 !important;
                color: #888 !important;
                cursor: not-allowed;
            }

        .form-control, .form-select {
            border-radius: 12px !important;
        }

        nav a, nav .nav-link, nav .dropdown-toggle {
            text-decoration: none !important;
            border-bottom: none !important;
        }
    </style>

    <div class="container form-container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <form id="appointmentForm"
                      action="@Url.Action("Index","Appointment")"
                      method="post"
                      class="php-email-form"
                      novalidate>
                    @Html.AntiForgeryToken()
                    <div class="row gy-4">
                        <div class="col-md-6">
                            <label>@localizer["FirstName"]</label>
                            <input type="text" name="Name" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label>@localizer["LastName"]</label>
                            <input type="text" name="Surname" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label>@localizer["Email"]</label>
                            <input type="email" name="Email" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label>@localizer["DateTime"]</label>
                            <input type="text"
                                   name="DateTime"
                                   id="DateTime"
                                   class="form-control"
                                   placeholder="@localizer["SelectDateTime"]"
                                   readonly
                                   data-bs-toggle="modal"
                                   data-bs-target="#dateTimeModal" />
                        </div>
                        <div class="col-md-12">
                            <label>@localizer["Description"]</label>
                            <textarea name="Message" rows="6" class="form-control" required></textarea>
                        </div>
                        <div class="col-md-12 text-center">
                            <div class="loading">@localizer["Loading"]</div>
                            <div class="error-message"></div>
                            <div class="sent-message">@localizer["AppointmentCreated"]</div>
                            <button type="submit" class="btn btn-primary mt-3">
                                @localizer["CreateAppointment"]
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="dateTimeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">@localizer["SelectDateTime"]</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                            aria-label="@localizer["Close"]"></button>
                </div>

                <div class="modal-body d-flex flex-row">
                    <div id="calendar" style="flex: 2;"></div>
                    <div id="timeSlotsContainer"
                         class="d-flex flex-column align-items-center ms-3"
                         style="flex: 1;"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- JS -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const timeSlots = [
            { start: "09:00", end: "10:50" },
            { start: "11:00", end: "11:50" },
            { start: "13:00", end: "13:50" },
            { start: "14:00", end: "14:50" },
            { start: "15:00", end: "15:50" },
            { start: "16:00", end: "16:50" },
            { start: "17:00", end: "17:50" }
        ];

        const bookedSlots = {
            "2025-07-08": ["09:00", "14:00"],
            "2025-07-09": ["11:00", "15:00", "16:00"],
            "2025-07-10": ["11:00", "15:00", "16:00"],
            "2025-07-11": ["11:00", "13:00"],
            "2025-07-12": ["09:00", "16:00"],
            "2025-07-13": ["11:00", "17:00"],
            "2025-07-14": ["09:00", "16:00"]
        };

        const calendarEl = document.getElementById('calendar');
        const timeSlotsContEl = document.getElementById('timeSlotsContainer');
        const dateTimeInput = document.getElementById('DateTime');

        let selectedDate = null;
        let calendar = null;
        let events = [];

        const modalEl = document.getElementById('dateTimeModal');
        const modal = new bootstrap.Modal(modalEl);

        const localizerStrings = {
            success: '@localizer["Success"]',
            appointmentCreated: '@localizer["AppointmentCreated"]',
            ok: '@localizer["OK"]'
        };

        modalEl.addEventListener('shown.bs.modal', () => {
            if (!calendar) {
                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    height: 500,
                    selectable: true,
                    dateClick(info) {
                        if (selectedDate && selectedDate !== info.dateStr) {
                            const existing = calendar.getEventById(`event-${selectedDate}`);
                            if (existing) {
                                existing.remove();
                                events = events.filter(e => e.id !== existing.id);
                                dateTimeInput.value = '';
                            }
                        }
                        selectedDate = info.dateStr;
                        renderTimeSlots(selectedDate);
                    },
                    events: events,
                    eventContent(arg) {
                        const [s, e] = arg.event.title.split(' - ');
                        const div = document.createElement('div');
                        Object.assign(div.style, {
                            whiteSpace: 'pre-line', fontSize: '1.05em',
                            lineHeight: '1.25em', textAlign: 'center',
                            color: 'royalblue', fontWeight: 'bold'
                        });
                        div.textContent = `${s}\n-\n${e}`;
                        return { domNodes: [div] };
                    }
                });
            }
            calendar.render();
        });

        function renderTimeSlots(dateStr) {
            timeSlotsContEl.innerHTML = '';
            if (!dateStr) return;

            const booked = bookedSlots[dateStr] || [];
            timeSlots.forEach(slot => {
                const btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'btn btn-outline-primary';
                btn.textContent = `${slot.start} - ${slot.end}`;
                btn.disabled = booked.includes(slot.start);

                btn.addEventListener('click', () => {
                    if (btn.disabled) return;

                    timeSlotsContEl.querySelectorAll('button').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');

                    const evtId = `event-${dateStr}`;
                    const oldEvt = calendar.getEventById(evtId);
                    if (oldEvt) {
                        oldEvt.remove();
                        events = events.filter(e => e.id !== evtId);
                    }

                    dateTimeInput.value = `${dateStr} ${slot.start} - ${slot.end}`;

                    const newEvent = {
                        id: evtId,
                        title: `${slot.start} - ${slot.end}`,
                        start: `${dateStr}T${slot.start}`,
                        end: `${dateStr}T${slot.end}`,
                        allDay: false,
                        backgroundColor: 'royalblue',
                        borderColor: 'royalblue',
                        textColor: 'white'
                    };
                    events.push(newEvent);
                    calendar.addEvent(newEvent);
                    modal.hide();
                });
                timeSlotsContEl.appendChild(btn);
            });
        }

        document.getElementById('appointmentForm').addEventListener('submit', function (e) {
            e.preventDefault(); 

            Swal.fire({
                icon: 'success',
                title: localizerStrings.success,
                text: localizerStrings.appointmentCreated,
                confirmButtonText: localizerStrings.ok
            }).then((result) => {
                if (result.isConfirmed) {
                    this.submit(); 
                }
            });
        });
    });
</script>
