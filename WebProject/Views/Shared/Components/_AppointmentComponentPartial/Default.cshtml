@model WebProject.Models.Appointment

<!-- CSS -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

<section id="contact" class="contact section">
    <div class="container section-title mb-3">
        <h2>Randevu Al</h2>
        <h5 class="mb-0">Sorularınız, talepleriniz veya görüşmek istediğiniz konular için randevu formumuzu doldurabilirsiniz.</h5>
    </div>

    <style>
        /* ... aynı css kodlar ... */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .loading, .error-message, .sent-message {
            display: none !important;
        }

        #calendar {
            max-width: 600px;
            margin: 20px auto 10px auto;
            background-color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .fc-daygrid-day-number {
            color: black;
            font-weight: bold;
            text-decoration: none !important;
        }

        .fc-col-header-cell a {
            text-decoration: none !important;
        }

        .fc-daygrid-day {
            height: 100px;
            border: 1px solid #ddd !important;
            position: relative;
        }

        .fc-col-header-cell {
            border: 1px solid #ddd !important;
        }

        .fc-scrollgrid-sync-table {
            border-collapse: collapse !important;
        }

        #timeSlotsContainer {
            margin-top: 10px;
        }

            #timeSlotsContainer button {
                margin: 3px 3px 3px 0;
            }

                #timeSlotsContainer button.active {
                    background-color: royalblue;
                    color: white;
                }

                #timeSlotsContainer button:disabled {
                    background-color: #e0e0e0 !important;
                    color: #888 !important;
                    cursor: not-allowed;
                }

        .form-control, .form-select {
            border-radius: 12px !important;
        }
    </style>

    <div class="container form-container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <form id="appointmentForm" action="@Url.Action("Index", "Appointment")" method="post" class="php-email-form" novalidate>
                    @Html.AntiForgeryToken()
                    <div class="row gy-4">
                        <div class="col-md-6">
                            <label>Ad</label>
                            <input type="text" name="Name" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label>Soyad</label>
                            <input type="text" name="Surname" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label>Email</label>
                            <input type="email" name="Email" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label>Tarih ve Saat</label>
                            <input type="text" name="DateTime" id="DateTime" class="form-control" placeholder="Tarih ve saat seçiniz" readonly data-bs-toggle="modal" data-bs-target="#dateTimeModal" />
                        </div>
                        <div class="col-md-12">
                            <label>Açıklama</label>
                            <textarea name="Message" rows="6" class="form-control" required></textarea>
                        </div>
                        <div class="col-md-12 text-center">
                            <div class="loading">Yükleniyor</div>
                            <div class="error-message"></div>
                            <div class="sent-message">Randevu Oluşturuldu</div>
                            <button type="submit" class="btn btn-primary mt-3">Randevu Oluştur</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="dateTimeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">Tarih ve Saat Seç</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                </div>
                <div class="modal-body">
                    <div id="calendar"></div>
                    <div id="timeSlotsContainer" class="d-flex flex-wrap"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- JS -->
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const timeSlots = [
            { start: "09:00", end: "10:50" },
            { start: "11:00", end: "11:50" },
            { start: "13:00", end: "13:50" },
            { start: "14:00", end: "14:50" },
            { start: "15:00", end: "15:50" },
            { start: "16:00", end: "16:50" },
            { start: "17:00", end: "17:50" }
        ];

        const bookedSlots = {
            "2025-07-08": ["09:00", "14:00"],
            "2025-07-09": ["11:00", "15:00", "16:00"],
            "2025-07-10": ["11:00", "15:00", "16:00"],
            "2025-07-11": ["11:00", "13:00"],
            "2025-07-12": ["09:00", "16:00"],
            "2025-07-13": ["11:00", "17:00"],
            "2025-07-14": ["09:00", "16:00"]
        };

        const calendarEl = document.getElementById('calendar');
        const timeSlotsContainer = document.getElementById('timeSlotsContainer');
        const dateTimeInput = document.getElementById('DateTime');

        let selectedDate = null;
        let calendar = null;
        let events = [];

        const modalEl = document.getElementById('dateTimeModal');
        const modal = new bootstrap.Modal(modalEl);

        modalEl.addEventListener('shown.bs.modal', function () {
            if (!calendar) {
                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    height: 500,
                    selectable: true,
                    dateClick: function (info) {
                        if (selectedDate && selectedDate !== info.dateStr) {
                            const existingEventId = `event-${selectedDate}`;
                            const existingEvent = calendar.getEventById(existingEventId);
                            if (existingEvent) {
                                existingEvent.remove();
                                events = events.filter(e => e.id !== existingEventId);
                                dateTimeInput.value = '';
                            }
                        }

                        selectedDate = info.dateStr;
                        renderTimeSlots(selectedDate);
                    },
                    events: events,
                    eventClick: function (info) {
                        if (confirm(`"${info.event.title.replace(/\n/g, ' ')}" saatini kaldırmak istediğinize emin misiniz?`)) {
                            info.event.remove();

                            const date = info.event.startStr.slice(0, 10);
                            const time = info.event.title.split('\n')[0];

                            events = events.filter(e => e.id !== info.event.id);

                            if (selectedDate === date) {
                                selectedDate = null;
                                renderTimeSlots(null);
                            }

                            if (dateTimeInput.value.startsWith(date) && dateTimeInput.value.includes(time)) {
                                dateTimeInput.value = '';
                            }
                        }
                    },
                    eventContent: function (arg) {
                        const timeRange = arg.event.title.split(' - ');
                        const innerHtml = document.createElement('div');
                        innerHtml.style.whiteSpace = 'pre-line';
                        innerHtml.style.fontSize = '0.9em';
                        innerHtml.style.lineHeight = '1.2em';
                        innerHtml.style.textAlign = 'center';
                        innerHtml.style.color = 'royalblue';
                        innerHtml.style.fontWeight = 'bold';

                        innerHtml.textContent = timeRange[0] + '\n-\n' + timeRange[1];

                        return { domNodes: [innerHtml] };
                    }
                });
            }
            calendar.render();
        });

        function renderTimeSlots(dateStr) {
            timeSlotsContainer.innerHTML = '';
            if (!dateStr) return;

            const bookedForDate = bookedSlots[dateStr] || [];

            timeSlots.forEach(slot => {
                const btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'btn btn-outline-primary';
                btn.style.minWidth = '110px';
                btn.textContent = `${slot.start} - ${slot.end}`;

                btn.disabled = bookedForDate.includes(slot.start);

                btn.addEventListener('click', () => {
                    if (btn.disabled) return;

                    document.querySelectorAll('#timeSlotsContainer button').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');

                    if (selectedDate && calendar) {
                        const existingEventId = `event-${selectedDate}`;
                        const existingEvent = calendar.getEventById(existingEventId);
                        if (existingEvent) {
                            existingEvent.remove();
                            events = events.filter(e => e.id !== existingEventId);
                        }
                    }

                    dateTimeInput.value = `${dateStr} ${slot.start} - ${slot.end}`;

                    const startDateTime = new Date(dateStr + 'T' + slot.start);
                    const endDateTime = new Date(dateStr + 'T' + slot.end);

                    const eventId = `event-${dateStr}`;

                    const newEvent = {
                        id: eventId,
                        title: `${slot.start} - ${slot.end}`,
                        start: startDateTime.toISOString(),
                        end: endDateTime.toISOString(),
                        allDay: false,
                        backgroundColor: 'royalblue',
                        borderColor: 'royalblue',
                        textColor: 'white'
                    };

                    events.push(newEvent);
                    calendar.addEvent(newEvent);

                    modal.hide();
                });

                timeSlotsContainer.appendChild(btn);
            });
        }

        document.getElementById('appointmentForm').addEventListener('submit', function (e) {
            Swal.fire({
                icon: 'success',
                title: 'Başarılı',
                text: 'Randevu oluşturuldu!',
                confirmButtonText: 'Tamam'
            }).then(() => {
                e.target.submit();
            });

            e.preventDefault();
        });

    });
</script>

